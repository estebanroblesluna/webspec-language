/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.node;

import org.webspeclanguage.impl.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AWidgetOrWidgetAccessListWithProperty extends PWidgetOrWidgetAccessListWithProperty
{
    private TPoint _p_;
    private PWidgetOrWidgetAccess _widgetOrWidgetAccess_;

    public AWidgetOrWidgetAccessListWithProperty()
    {
        // Constructor
    }

    public AWidgetOrWidgetAccessListWithProperty(
        @SuppressWarnings("hiding") TPoint _p_,
        @SuppressWarnings("hiding") PWidgetOrWidgetAccess _widgetOrWidgetAccess_)
    {
        // Constructor
        setP(_p_);

        setWidgetOrWidgetAccess(_widgetOrWidgetAccess_);

    }

    @Override
    public Object clone()
    {
        return new AWidgetOrWidgetAccessListWithProperty(
            cloneNode(this._p_),
            cloneNode(this._widgetOrWidgetAccess_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWidgetOrWidgetAccessListWithProperty(this);
    }

    public TPoint getP()
    {
        return this._p_;
    }

    public void setP(TPoint node)
    {
        if(this._p_ != null)
        {
            this._p_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._p_ = node;
    }

    public PWidgetOrWidgetAccess getWidgetOrWidgetAccess()
    {
        return this._widgetOrWidgetAccess_;
    }

    public void setWidgetOrWidgetAccess(PWidgetOrWidgetAccess node)
    {
        if(this._widgetOrWidgetAccess_ != null)
        {
            this._widgetOrWidgetAccess_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._widgetOrWidgetAccess_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._p_)
            + toString(this._widgetOrWidgetAccess_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._p_ == child)
        {
            this._p_ = null;
            return;
        }

        if(this._widgetOrWidgetAccess_ == child)
        {
            this._widgetOrWidgetAccess_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._p_ == oldChild)
        {
            setP((TPoint) newChild);
            return;
        }

        if(this._widgetOrWidgetAccess_ == oldChild)
        {
            setWidgetOrWidgetAccess((PWidgetOrWidgetAccess) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
