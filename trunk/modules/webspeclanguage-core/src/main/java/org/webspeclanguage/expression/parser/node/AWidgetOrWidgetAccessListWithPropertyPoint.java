/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.expression.parser.node;

import org.webspeclanguage.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AWidgetOrWidgetAccessListWithPropertyPoint extends PWidgetOrWidgetAccessListWithPropertyPoint
{
    private TPoint _point_;
    private PWidgetOrWidgetAccess _widgetOrWidgetAccess_;

    public AWidgetOrWidgetAccessListWithPropertyPoint()
    {
        // Constructor
    }

    public AWidgetOrWidgetAccessListWithPropertyPoint(
        @SuppressWarnings("hiding") TPoint _point_,
        @SuppressWarnings("hiding") PWidgetOrWidgetAccess _widgetOrWidgetAccess_)
    {
        // Constructor
        setPoint(_point_);

        setWidgetOrWidgetAccess(_widgetOrWidgetAccess_);

    }

    @Override
    public Object clone()
    {
        return new AWidgetOrWidgetAccessListWithPropertyPoint(
            cloneNode(this._point_),
            cloneNode(this._widgetOrWidgetAccess_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWidgetOrWidgetAccessListWithPropertyPoint(this);
    }

    public TPoint getPoint()
    {
        return this._point_;
    }

    public void setPoint(TPoint node)
    {
        if(this._point_ != null)
        {
            this._point_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._point_ = node;
    }

    public PWidgetOrWidgetAccess getWidgetOrWidgetAccess()
    {
        return this._widgetOrWidgetAccess_;
    }

    public void setWidgetOrWidgetAccess(PWidgetOrWidgetAccess node)
    {
        if(this._widgetOrWidgetAccess_ != null)
        {
            this._widgetOrWidgetAccess_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._widgetOrWidgetAccess_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._point_)
            + toString(this._widgetOrWidgetAccess_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._point_ == child)
        {
            this._point_ = null;
            return;
        }

        if(this._widgetOrWidgetAccess_ == child)
        {
            this._widgetOrWidgetAccess_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._point_ == oldChild)
        {
            setPoint((TPoint) newChild);
            return;
        }

        if(this._widgetOrWidgetAccess_ == oldChild)
        {
            setWidgetOrWidgetAccess((PWidgetOrWidgetAccess) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
