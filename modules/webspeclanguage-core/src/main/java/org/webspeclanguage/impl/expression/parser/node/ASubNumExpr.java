/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.node;

import org.webspeclanguage.impl.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class ASubNumExpr extends PNumExpr
{
    private PNumExpr _left_;
    private TSub _sub_;
    private PFactor _right_;

    public ASubNumExpr()
    {
        // Constructor
    }

    public ASubNumExpr(
        @SuppressWarnings("hiding") PNumExpr _left_,
        @SuppressWarnings("hiding") TSub _sub_,
        @SuppressWarnings("hiding") PFactor _right_)
    {
        // Constructor
        setLeft(_left_);

        setSub(_sub_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new ASubNumExpr(
            cloneNode(this._left_),
            cloneNode(this._sub_),
            cloneNode(this._right_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASubNumExpr(this);
    }

    public PNumExpr getLeft()
    {
        return this._left_;
    }

    public void setLeft(PNumExpr node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TSub getSub()
    {
        return this._sub_;
    }

    public void setSub(TSub node)
    {
        if(this._sub_ != null)
        {
            this._sub_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sub_ = node;
    }

    public PFactor getRight()
    {
        return this._right_;
    }

    public void setRight(PFactor node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._sub_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._sub_ == child)
        {
            this._sub_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((PNumExpr) newChild);
            return;
        }

        if(this._sub_ == oldChild)
        {
            setSub((TSub) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PFactor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
