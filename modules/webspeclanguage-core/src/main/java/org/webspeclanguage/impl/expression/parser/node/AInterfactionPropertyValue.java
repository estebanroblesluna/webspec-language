/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.node;

import org.webspeclanguage.impl.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AInterfactionPropertyValue extends PValue
{
    private TIdentifier _interaction_;
    private TPoint _point_;
    private TIdentifier _property_;

    public AInterfactionPropertyValue()
    {
        // Constructor
    }

    public AInterfactionPropertyValue(
        @SuppressWarnings("hiding") TIdentifier _interaction_,
        @SuppressWarnings("hiding") TPoint _point_,
        @SuppressWarnings("hiding") TIdentifier _property_)
    {
        // Constructor
        setInteraction(_interaction_);

        setPoint(_point_);

        setProperty(_property_);

    }

    @Override
    public Object clone()
    {
        return new AInterfactionPropertyValue(
            cloneNode(this._interaction_),
            cloneNode(this._point_),
            cloneNode(this._property_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInterfactionPropertyValue(this);
    }

    public TIdentifier getInteraction()
    {
        return this._interaction_;
    }

    public void setInteraction(TIdentifier node)
    {
        if(this._interaction_ != null)
        {
            this._interaction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interaction_ = node;
    }

    public TPoint getPoint()
    {
        return this._point_;
    }

    public void setPoint(TPoint node)
    {
        if(this._point_ != null)
        {
            this._point_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._point_ = node;
    }

    public TIdentifier getProperty()
    {
        return this._property_;
    }

    public void setProperty(TIdentifier node)
    {
        if(this._property_ != null)
        {
            this._property_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._property_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._interaction_)
            + toString(this._point_)
            + toString(this._property_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._interaction_ == child)
        {
            this._interaction_ = null;
            return;
        }

        if(this._point_ == child)
        {
            this._point_ = null;
            return;
        }

        if(this._property_ == child)
        {
            this._property_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._interaction_ == oldChild)
        {
            setInteraction((TIdentifier) newChild);
            return;
        }

        if(this._point_ == oldChild)
        {
            setPoint((TPoint) newChild);
            return;
        }

        if(this._property_ == oldChild)
        {
            setProperty((TIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
