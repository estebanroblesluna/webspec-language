/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.node;

import java.util.*;
import org.webspeclanguage.impl.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AWidgetOrWidgetAccessListWithProperty extends PWidgetOrWidgetAccessListWithProperty
{
    private PWidgetOrWidgetAccess _widgetOrWidgetAccess_;
    private final LinkedList<PWidgetOrWidgetAccessListWithPropertyPoint> _widgetOrWidgetAccessListWithPropertyPoint_ = new LinkedList<PWidgetOrWidgetAccessListWithPropertyPoint>();

    public AWidgetOrWidgetAccessListWithProperty()
    {
        // Constructor
    }

    public AWidgetOrWidgetAccessListWithProperty(
        @SuppressWarnings("hiding") PWidgetOrWidgetAccess _widgetOrWidgetAccess_,
        @SuppressWarnings("hiding") List<PWidgetOrWidgetAccessListWithPropertyPoint> _widgetOrWidgetAccessListWithPropertyPoint_)
    {
        // Constructor
        setWidgetOrWidgetAccess(_widgetOrWidgetAccess_);

        setWidgetOrWidgetAccessListWithPropertyPoint(_widgetOrWidgetAccessListWithPropertyPoint_);

    }

    @Override
    public Object clone()
    {
        return new AWidgetOrWidgetAccessListWithProperty(
            cloneNode(this._widgetOrWidgetAccess_),
            cloneList(this._widgetOrWidgetAccessListWithPropertyPoint_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWidgetOrWidgetAccessListWithProperty(this);
    }

    public PWidgetOrWidgetAccess getWidgetOrWidgetAccess()
    {
        return this._widgetOrWidgetAccess_;
    }

    public void setWidgetOrWidgetAccess(PWidgetOrWidgetAccess node)
    {
        if(this._widgetOrWidgetAccess_ != null)
        {
            this._widgetOrWidgetAccess_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._widgetOrWidgetAccess_ = node;
    }

    public LinkedList<PWidgetOrWidgetAccessListWithPropertyPoint> getWidgetOrWidgetAccessListWithPropertyPoint()
    {
        return this._widgetOrWidgetAccessListWithPropertyPoint_;
    }

    public void setWidgetOrWidgetAccessListWithPropertyPoint(List<PWidgetOrWidgetAccessListWithPropertyPoint> list)
    {
        this._widgetOrWidgetAccessListWithPropertyPoint_.clear();
        this._widgetOrWidgetAccessListWithPropertyPoint_.addAll(list);
        for(PWidgetOrWidgetAccessListWithPropertyPoint e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._widgetOrWidgetAccess_)
            + toString(this._widgetOrWidgetAccessListWithPropertyPoint_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._widgetOrWidgetAccess_ == child)
        {
            this._widgetOrWidgetAccess_ = null;
            return;
        }

        if(this._widgetOrWidgetAccessListWithPropertyPoint_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._widgetOrWidgetAccess_ == oldChild)
        {
            setWidgetOrWidgetAccess((PWidgetOrWidgetAccess) newChild);
            return;
        }

        for(ListIterator<PWidgetOrWidgetAccessListWithPropertyPoint> i = this._widgetOrWidgetAccessListWithPropertyPoint_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PWidgetOrWidgetAccessListWithPropertyPoint) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
