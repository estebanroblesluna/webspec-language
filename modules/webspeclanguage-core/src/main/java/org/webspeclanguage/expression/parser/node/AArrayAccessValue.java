/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.expression.parser.node;

import org.webspeclanguage.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AArrayAccessValue extends PValue
{
    private PValue _value_;
    private TLeftBlock _leftBlock_;
    private TNumber _number_;
    private TRightBlock _rightBlock_;

    public AArrayAccessValue()
    {
        // Constructor
    }

    public AArrayAccessValue(
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") TLeftBlock _leftBlock_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") TRightBlock _rightBlock_)
    {
        // Constructor
        setValue(_value_);

        setLeftBlock(_leftBlock_);

        setNumber(_number_);

        setRightBlock(_rightBlock_);

    }

    @Override
    public Object clone()
    {
        return new AArrayAccessValue(
            cloneNode(this._value_),
            cloneNode(this._leftBlock_),
            cloneNode(this._number_),
            cloneNode(this._rightBlock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArrayAccessValue(this);
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public TLeftBlock getLeftBlock()
    {
        return this._leftBlock_;
    }

    public void setLeftBlock(TLeftBlock node)
    {
        if(this._leftBlock_ != null)
        {
            this._leftBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBlock_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TRightBlock getRightBlock()
    {
        return this._rightBlock_;
    }

    public void setRightBlock(TRightBlock node)
    {
        if(this._rightBlock_ != null)
        {
            this._rightBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._value_)
            + toString(this._leftBlock_)
            + toString(this._number_)
            + toString(this._rightBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._leftBlock_ == child)
        {
            this._leftBlock_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._rightBlock_ == child)
        {
            this._rightBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        if(this._leftBlock_ == oldChild)
        {
            setLeftBlock((TLeftBlock) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._rightBlock_ == oldChild)
        {
            setRightBlock((TRightBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
