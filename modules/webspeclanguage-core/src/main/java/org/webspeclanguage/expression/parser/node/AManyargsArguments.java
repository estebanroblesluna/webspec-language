/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.expression.parser.node;

import org.webspeclanguage.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AManyargsArguments extends PArguments
{
    private PExpr _expr_;
    private TComma _comma_;
    private PArguments _arguments_;

    public AManyargsArguments()
    {
        // Constructor
    }

    public AManyargsArguments(
        @SuppressWarnings("hiding") PExpr _expr_,
        @SuppressWarnings("hiding") TComma _comma_,
        @SuppressWarnings("hiding") PArguments _arguments_)
    {
        // Constructor
        setExpr(_expr_);

        setComma(_comma_);

        setArguments(_arguments_);

    }

    @Override
    public Object clone()
    {
        return new AManyargsArguments(
            cloneNode(this._expr_),
            cloneNode(this._comma_),
            cloneNode(this._arguments_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAManyargsArguments(this);
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    public TComma getComma()
    {
        return this._comma_;
    }

    public void setComma(TComma node)
    {
        if(this._comma_ != null)
        {
            this._comma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comma_ = node;
    }

    public PArguments getArguments()
    {
        return this._arguments_;
    }

    public void setArguments(PArguments node)
    {
        if(this._arguments_ != null)
        {
            this._arguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arguments_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr_)
            + toString(this._comma_)
            + toString(this._arguments_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        if(this._comma_ == child)
        {
            this._comma_ = null;
            return;
        }

        if(this._arguments_ == child)
        {
            this._arguments_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        if(this._comma_ == oldChild)
        {
            setComma((TComma) newChild);
            return;
        }

        if(this._arguments_ == oldChild)
        {
            setArguments((PArguments) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
