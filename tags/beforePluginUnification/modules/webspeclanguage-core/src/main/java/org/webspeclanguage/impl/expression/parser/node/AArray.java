/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.node;

import org.webspeclanguage.impl.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AArray extends PArray
{
    private TLeftBlock _leftBlock_;
    private PArguments _arguments_;
    private TRightBlock _rightBlock_;

    public AArray()
    {
        // Constructor
    }

    public AArray(
        @SuppressWarnings("hiding") TLeftBlock _leftBlock_,
        @SuppressWarnings("hiding") PArguments _arguments_,
        @SuppressWarnings("hiding") TRightBlock _rightBlock_)
    {
        // Constructor
        setLeftBlock(_leftBlock_);

        setArguments(_arguments_);

        setRightBlock(_rightBlock_);

    }

    @Override
    public Object clone()
    {
        return new AArray(
            cloneNode(this._leftBlock_),
            cloneNode(this._arguments_),
            cloneNode(this._rightBlock_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArray(this);
    }

    public TLeftBlock getLeftBlock()
    {
        return this._leftBlock_;
    }

    public void setLeftBlock(TLeftBlock node)
    {
        if(this._leftBlock_ != null)
        {
            this._leftBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leftBlock_ = node;
    }

    public PArguments getArguments()
    {
        return this._arguments_;
    }

    public void setArguments(PArguments node)
    {
        if(this._arguments_ != null)
        {
            this._arguments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._arguments_ = node;
    }

    public TRightBlock getRightBlock()
    {
        return this._rightBlock_;
    }

    public void setRightBlock(TRightBlock node)
    {
        if(this._rightBlock_ != null)
        {
            this._rightBlock_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rightBlock_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leftBlock_)
            + toString(this._arguments_)
            + toString(this._rightBlock_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leftBlock_ == child)
        {
            this._leftBlock_ = null;
            return;
        }

        if(this._arguments_ == child)
        {
            this._arguments_ = null;
            return;
        }

        if(this._rightBlock_ == child)
        {
            this._rightBlock_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leftBlock_ == oldChild)
        {
            setLeftBlock((TLeftBlock) newChild);
            return;
        }

        if(this._arguments_ == oldChild)
        {
            setArguments((PArguments) newChild);
            return;
        }

        if(this._rightBlock_ == oldChild)
        {
            setRightBlock((TRightBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
