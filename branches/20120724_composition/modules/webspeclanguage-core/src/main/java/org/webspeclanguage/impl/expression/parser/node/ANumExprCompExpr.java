/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.node;

import org.webspeclanguage.impl.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class ANumExprCompExpr extends PCompExpr
{
    private PNumExpr _numExpr_;

    public ANumExprCompExpr()
    {
        // Constructor
    }

    public ANumExprCompExpr(
        @SuppressWarnings("hiding") PNumExpr _numExpr_)
    {
        // Constructor
        setNumExpr(_numExpr_);

    }

    @Override
    public Object clone()
    {
        return new ANumExprCompExpr(
            cloneNode(this._numExpr_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANumExprCompExpr(this);
    }

    public PNumExpr getNumExpr()
    {
        return this._numExpr_;
    }

    public void setNumExpr(PNumExpr node)
    {
        if(this._numExpr_ != null)
        {
            this._numExpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._numExpr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._numExpr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._numExpr_ == child)
        {
            this._numExpr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._numExpr_ == oldChild)
        {
            setNumExpr((PNumExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
