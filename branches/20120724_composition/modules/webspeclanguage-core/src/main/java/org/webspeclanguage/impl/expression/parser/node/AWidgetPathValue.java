/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.node;

import java.util.*;
import org.webspeclanguage.impl.expression.parser.analysis.*;

@SuppressWarnings("nls")
public final class AWidgetPathValue extends PValue
{
    private TIdentifier _interaction_;
    private final LinkedList<PWidgetOrWidgetAccessListWithProperty> _widgets_ = new LinkedList<PWidgetOrWidgetAccessListWithProperty>();

    public AWidgetPathValue()
    {
        // Constructor
    }

    public AWidgetPathValue(
        @SuppressWarnings("hiding") TIdentifier _interaction_,
        @SuppressWarnings("hiding") List<PWidgetOrWidgetAccessListWithProperty> _widgets_)
    {
        // Constructor
        setInteraction(_interaction_);

        setWidgets(_widgets_);

    }

    @Override
    public Object clone()
    {
        return new AWidgetPathValue(
            cloneNode(this._interaction_),
            cloneList(this._widgets_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAWidgetPathValue(this);
    }

    public TIdentifier getInteraction()
    {
        return this._interaction_;
    }

    public void setInteraction(TIdentifier node)
    {
        if(this._interaction_ != null)
        {
            this._interaction_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interaction_ = node;
    }

    public LinkedList<PWidgetOrWidgetAccessListWithProperty> getWidgets()
    {
        return this._widgets_;
    }

    public void setWidgets(List<PWidgetOrWidgetAccessListWithProperty> list)
    {
        this._widgets_.clear();
        this._widgets_.addAll(list);
        for(PWidgetOrWidgetAccessListWithProperty e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._interaction_)
            + toString(this._widgets_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._interaction_ == child)
        {
            this._interaction_ = null;
            return;
        }

        if(this._widgets_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._interaction_ == oldChild)
        {
            setInteraction((TIdentifier) newChild);
            return;
        }

        for(ListIterator<PWidgetOrWidgetAccessListWithProperty> i = this._widgets_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PWidgetOrWidgetAccessListWithProperty) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
