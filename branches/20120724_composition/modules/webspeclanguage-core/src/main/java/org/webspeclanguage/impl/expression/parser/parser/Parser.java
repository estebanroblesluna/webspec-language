/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.webspeclanguage.impl.expression.parser.parser;

import org.webspeclanguage.impl.expression.parser.lexer.*;
import org.webspeclanguage.impl.expression.parser.node.*;
import org.webspeclanguage.impl.expression.parser.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList nodeList;

    private final Lexer lexer;
    private final ListIterator stack = new LinkedList().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList list = new ArrayList();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    switch(this.action[1])
                    {
                    case 0: /* reduce ASingleactionActions */
		    {
			ArrayList list = new0();
			push(goTo(0), list, false);
		    }
		    break;
                    case 1: /* reduce AManyactionsActions */
		    {
			ArrayList list = new1();
			push(goTo(0), list, false);
		    }
		    break;
                    case 2: /* reduce AAletaction1Action */
		    {
			ArrayList list = new2();
			push(goTo(1), list, false);
		    }
		    break;
                    case 3: /* reduce AAletaction2Action */
		    {
			ArrayList list = new3();
			push(goTo(1), list, false);
		    }
		    break;
                    case 4: /* reduce AExprAction */
		    {
			ArrayList list = new4();
			push(goTo(1), list, false);
		    }
		    break;
                    case 5: /* reduce AOneargArguments */
		    {
			ArrayList list = new5();
			push(goTo(2), list, false);
		    }
		    break;
                    case 6: /* reduce AManyargsArguments */
		    {
			ArrayList list = new6();
			push(goTo(2), list, false);
		    }
		    break;
                    case 7: /* reduce AAndExpr */
		    {
			ArrayList list = new7();
			push(goTo(3), list, false);
		    }
		    break;
                    case 8: /* reduce AOrExpr */
		    {
			ArrayList list = new8();
			push(goTo(3), list, false);
		    }
		    break;
                    case 9: /* reduce AImpliesExpr */
		    {
			ArrayList list = new9();
			push(goTo(3), list, false);
		    }
		    break;
                    case 10: /* reduce ANotExpr */
		    {
			ArrayList list = new10();
			push(goTo(3), list, false);
		    }
		    break;
                    case 11: /* reduce ACompExprExpr */
		    {
			ArrayList list = new11();
			push(goTo(3), list, false);
		    }
		    break;
                    case 12: /* reduce AGreaterCompExpr */
		    {
			ArrayList list = new12();
			push(goTo(4), list, false);
		    }
		    break;
                    case 13: /* reduce AGreaterEqualCompExpr */
		    {
			ArrayList list = new13();
			push(goTo(4), list, false);
		    }
		    break;
                    case 14: /* reduce ANotEqualCompExpr */
		    {
			ArrayList list = new14();
			push(goTo(4), list, false);
		    }
		    break;
                    case 15: /* reduce AEqualCompExpr */
		    {
			ArrayList list = new15();
			push(goTo(4), list, false);
		    }
		    break;
                    case 16: /* reduce ALowerCompExpr */
		    {
			ArrayList list = new16();
			push(goTo(4), list, false);
		    }
		    break;
                    case 17: /* reduce ALowerEqualCompExpr */
		    {
			ArrayList list = new17();
			push(goTo(4), list, false);
		    }
		    break;
                    case 18: /* reduce ANumExprCompExpr */
		    {
			ArrayList list = new18();
			push(goTo(4), list, false);
		    }
		    break;
                    case 19: /* reduce AAddNumExpr */
		    {
			ArrayList list = new19();
			push(goTo(5), list, false);
		    }
		    break;
                    case 20: /* reduce ASubNumExpr */
		    {
			ArrayList list = new20();
			push(goTo(5), list, false);
		    }
		    break;
                    case 21: /* reduce AFactorNumExpr */
		    {
			ArrayList list = new21();
			push(goTo(5), list, false);
		    }
		    break;
                    case 22: /* reduce AMulFactor */
		    {
			ArrayList list = new22();
			push(goTo(6), list, false);
		    }
		    break;
                    case 23: /* reduce ADivFactor */
		    {
			ArrayList list = new23();
			push(goTo(6), list, false);
		    }
		    break;
                    case 24: /* reduce AConcatFactor */
		    {
			ArrayList list = new24();
			push(goTo(6), list, false);
		    }
		    break;
                    case 25: /* reduce AValueFactor */
		    {
			ArrayList list = new25();
			push(goTo(6), list, false);
		    }
		    break;
                    case 26: /* reduce ANumberValue */
		    {
			ArrayList list = new26();
			push(goTo(7), list, false);
		    }
		    break;
                    case 27: /* reduce AStringValue */
		    {
			ArrayList list = new27();
			push(goTo(7), list, false);
		    }
		    break;
                    case 28: /* reduce ABooleanValue */
		    {
			ArrayList list = new28();
			push(goTo(7), list, false);
		    }
		    break;
                    case 29: /* reduce AAfunctioncallvalue1Value */
		    {
			ArrayList list = new29();
			push(goTo(7), list, false);
		    }
		    break;
                    case 30: /* reduce AAfunctioncallvalue2Value */
		    {
			ArrayList list = new30();
			push(goTo(7), list, false);
		    }
		    break;
                    case 31: /* reduce AVariableValue */
		    {
			ArrayList list = new31();
			push(goTo(7), list, false);
		    }
		    break;
                    case 32: /* reduce AGeneratorValue */
		    {
			ArrayList list = new32();
			push(goTo(7), list, false);
		    }
		    break;
                    case 33: /* reduce AParensValue */
		    {
			ArrayList list = new33();
			push(goTo(7), list, false);
		    }
		    break;
                    case 34: /* reduce AAnativefunctioncallvalue1Value */
		    {
			ArrayList list = new34();
			push(goTo(7), list, false);
		    }
		    break;
                    case 35: /* reduce AAnativefunctioncallvalue2Value */
		    {
			ArrayList list = new35();
			push(goTo(7), list, false);
		    }
		    break;
                    case 36: /* reduce AArrayValue */
		    {
			ArrayList list = new36();
			push(goTo(7), list, false);
		    }
		    break;
                    case 37: /* reduce AArrayAccessValue */
		    {
			ArrayList list = new37();
			push(goTo(7), list, false);
		    }
		    break;
                    case 38: /* reduce AWidgetPathValue */
		    {
			ArrayList list = new38();
			push(goTo(7), list, false);
		    }
		    break;
                    case 39: /* reduce AVariableVariableorliteralarray */
		    {
			ArrayList list = new39();
			push(goTo(8), list, false);
		    }
		    break;
                    case 40: /* reduce AArrayVariableorliteralarray */
		    {
			ArrayList list = new40();
			push(goTo(8), list, false);
		    }
		    break;
                    case 41: /* reduce AArray */
		    {
			ArrayList list = new41();
			push(goTo(9), list, false);
		    }
		    break;
                    case 42: /* reduce AVariable */
		    {
			ArrayList list = new42();
			push(goTo(10), list, false);
		    }
		    break;
                    case 43: /* reduce AWidgetOrWidgetAccessListWithProperty */
		    {
			ArrayList list = new43();
			push(goTo(11), list, false);
		    }
		    break;
                    case 44: /* reduce ASimplewidgetWidgetOrWidgetAccess */
		    {
			ArrayList list = new44();
			push(goTo(12), list, false);
		    }
		    break;
                    case 45: /* reduce AWidgetarrayaccessWidgetOrWidgetAccess */
		    {
			ArrayList list = new45();
			push(goTo(12), list, false);
		    }
		    break;
                    case 46: /* reduce ATrueBoolean */
		    {
			ArrayList list = new46();
			push(goTo(13), list, false);
		    }
		    break;
                    case 47: /* reduce AFalseBoolean */
		    {
			ArrayList list = new47();
			push(goTo(13), list, false);
		    }
		    break;
                    case 48: /* reduce AStringTypeType */
		    {
			ArrayList list = new48();
			push(goTo(14), list, false);
		    }
		    break;
                    case 49: /* reduce ANumberTypeType */
		    {
			ArrayList list = new49();
			push(goTo(14), list, false);
		    }
		    break;
                    case 50: /* reduce ABooleanTypeType */
		    {
			ArrayList list = new50();
			push(goTo(14), list, false);
		    }
		    break;
                    case 51: /* reduce ATerminal$WidgetOrWidgetAccessListWithProperty */
		    {
			ArrayList list = new51();
			push(goTo(15), list, true);
		    }
		    break;
                    case 52: /* reduce ANonTerminal$WidgetOrWidgetAccessListWithProperty */
		    {
			ArrayList list = new52();
			push(goTo(15), list, true);
		    }
		    break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PActions node1 = (PActions) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }



    @SuppressWarnings("unchecked")
    ArrayList new0() /* reduce ASingleactionActions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActions pactionsNode1;
        {
            // Block
        PAction pactionNode2;
        pactionNode2 = (PAction)nodeArrayList1.get(0);

        pactionsNode1 = new ASingleactionActions(pactionNode2);
        }
	nodeList.add(pactionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new1() /* reduce AManyactionsActions */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PActions pactionsNode1;
        {
            // Block
        PAction pactionNode2;
        TSemicolon tsemicolonNode3;
        PActions pactionsNode4;
        pactionNode2 = (PAction)nodeArrayList1.get(0);
        tsemicolonNode3 = (TSemicolon)nodeArrayList2.get(0);
        pactionsNode4 = (PActions)nodeArrayList3.get(0);

        pactionsNode1 = new AManyactionsActions(pactionNode2, tsemicolonNode3, pactionsNode4);
        }
	nodeList.add(pactionsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new2() /* reduce AAletaction1Action */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAction pactionNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TAssign tassignNode4;
        PExpr pexprNode5;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tassignNode4 = (TAssign)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);

        pactionNode1 = new ALetAction(null, tidentifierNode3, tassignNode4, pexprNode5);
        }
	nodeList.add(pactionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new3() /* reduce AAletaction2Action */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAction pactionNode1;
        {
            // Block
        PType ptypeNode2;
        TIdentifier tidentifierNode3;
        TAssign tassignNode4;
        PExpr pexprNode5;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tassignNode4 = (TAssign)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);

        pactionNode1 = new ALetAction(ptypeNode2, tidentifierNode3, tassignNode4, pexprNode5);
        }
	nodeList.add(pactionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new4() /* reduce AExprAction */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PAction pactionNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pactionNode1 = new AExprAction(pexprNode2);
        }
	nodeList.add(pactionNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new5() /* reduce AOneargArguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pargumentsNode1 = new AOneargArguments(pexprNode2);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new6() /* reduce AManyargsArguments */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArguments pargumentsNode1;
        {
            // Block
        PExpr pexprNode2;
        TComma tcommaNode3;
        PArguments pargumentsNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pargumentsNode4 = (PArguments)nodeArrayList3.get(0);

        pargumentsNode1 = new AManyargsArguments(pexprNode2, tcommaNode3, pargumentsNode4);
        }
	nodeList.add(pargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new7() /* reduce AAndExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TAnd tandNode3;
        PCompExpr pcompexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcompexprNode4 = (PCompExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAndExpr(pexprNode2, tandNode3, pcompexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new8() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOr torNode3;
        PCompExpr pcompexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        torNode3 = (TOr)nodeArrayList2.get(0);
        pcompexprNode4 = (PCompExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOrExpr(pexprNode2, torNode3, pcompexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new9() /* reduce AImpliesExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TImplies timpliesNode3;
        PCompExpr pcompexprNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        timpliesNode3 = (TImplies)nodeArrayList2.get(0);
        pcompexprNode4 = (PCompExpr)nodeArrayList3.get(0);

        pexprNode1 = new AImpliesExpr(pexprNode2, timpliesNode3, pcompexprNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new10() /* reduce ANotExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TNot tnotNode2;
        PCompExpr pcompexprNode3;
        tnotNode2 = (TNot)nodeArrayList1.get(0);
        pcompexprNode3 = (PCompExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANotExpr(tnotNode2, pcompexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new11() /* reduce ACompExprExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PCompExpr pcompexprNode2;
        pcompexprNode2 = (PCompExpr)nodeArrayList1.get(0);

        pexprNode1 = new ACompExprExpr(pcompexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new12() /* reduce AGreaterCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        PCompExpr pcompexprNode2;
        TGreater tgreaterNode3;
        PNumExpr pnumexprNode4;
        pcompexprNode2 = (PCompExpr)nodeArrayList1.get(0);
        tgreaterNode3 = (TGreater)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumExpr)nodeArrayList3.get(0);

        pcompexprNode1 = new AGreaterCompExpr(pcompexprNode2, tgreaterNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new13() /* reduce AGreaterEqualCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        PCompExpr pcompexprNode2;
        TGreaterEqual tgreaterequalNode3;
        PNumExpr pnumexprNode4;
        pcompexprNode2 = (PCompExpr)nodeArrayList1.get(0);
        tgreaterequalNode3 = (TGreaterEqual)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumExpr)nodeArrayList3.get(0);

        pcompexprNode1 = new AGreaterEqualCompExpr(pcompexprNode2, tgreaterequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new14() /* reduce ANotEqualCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        PCompExpr pcompexprNode2;
        TNotEqual tnotequalNode3;
        PNumExpr pnumexprNode4;
        pcompexprNode2 = (PCompExpr)nodeArrayList1.get(0);
        tnotequalNode3 = (TNotEqual)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumExpr)nodeArrayList3.get(0);

        pcompexprNode1 = new ANotEqualCompExpr(pcompexprNode2, tnotequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new15() /* reduce AEqualCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        PCompExpr pcompexprNode2;
        TEqual tequalNode3;
        PNumExpr pnumexprNode4;
        pcompexprNode2 = (PCompExpr)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumExpr)nodeArrayList3.get(0);

        pcompexprNode1 = new AEqualCompExpr(pcompexprNode2, tequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new16() /* reduce ALowerCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        PCompExpr pcompexprNode2;
        TLower tlowerNode3;
        PNumExpr pnumexprNode4;
        pcompexprNode2 = (PCompExpr)nodeArrayList1.get(0);
        tlowerNode3 = (TLower)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumExpr)nodeArrayList3.get(0);

        pcompexprNode1 = new ALowerCompExpr(pcompexprNode2, tlowerNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new17() /* reduce ALowerEqualCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        PCompExpr pcompexprNode2;
        TLowerEqual tlowerequalNode3;
        PNumExpr pnumexprNode4;
        pcompexprNode2 = (PCompExpr)nodeArrayList1.get(0);
        tlowerequalNode3 = (TLowerEqual)nodeArrayList2.get(0);
        pnumexprNode4 = (PNumExpr)nodeArrayList3.get(0);

        pcompexprNode1 = new ALowerEqualCompExpr(pcompexprNode2, tlowerequalNode3, pnumexprNode4);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new18() /* reduce ANumExprCompExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PCompExpr pcompexprNode1;
        {
            // Block
        PNumExpr pnumexprNode2;
        pnumexprNode2 = (PNumExpr)nodeArrayList1.get(0);

        pcompexprNode1 = new ANumExprCompExpr(pnumexprNode2);
        }
	nodeList.add(pcompexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new19() /* reduce AAddNumExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumExpr pnumexprNode1;
        {
            // Block
        PNumExpr pnumexprNode2;
        TAdd taddNode3;
        PFactor pfactorNode4;
        pnumexprNode2 = (PNumExpr)nodeArrayList1.get(0);
        taddNode3 = (TAdd)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pnumexprNode1 = new AAddNumExpr(pnumexprNode2, taddNode3, pfactorNode4);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new20() /* reduce ASubNumExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumExpr pnumexprNode1;
        {
            // Block
        PNumExpr pnumexprNode2;
        TSub tsubNode3;
        PFactor pfactorNode4;
        pnumexprNode2 = (PNumExpr)nodeArrayList1.get(0);
        tsubNode3 = (TSub)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pnumexprNode1 = new ASubNumExpr(pnumexprNode2, tsubNode3, pfactorNode4);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new21() /* reduce AFactorNumExpr */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PNumExpr pnumexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pnumexprNode1 = new AFactorNumExpr(pfactorNode2);
        }
	nodeList.add(pnumexprNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new22() /* reduce AMulFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMul tmulNode3;
        PValue pvalueNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmulNode3 = (TMul)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        pfactorNode1 = new AMulFactor(pfactorNode2, tmulNode3, pvalueNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new23() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDiv tdivNode3;
        PValue pvalueNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        pfactorNode1 = new ADivFactor(pfactorNode2, tdivNode3, pvalueNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new24() /* reduce AConcatFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TConcat tconcatNode3;
        PValue pvalueNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tconcatNode3 = (TConcat)nodeArrayList2.get(0);
        pvalueNode4 = (PValue)nodeArrayList3.get(0);

        pfactorNode1 = new AConcatFactor(pfactorNode2, tconcatNode3, pvalueNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new25() /* reduce AValueFactor */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pfactorNode1 = new AValueFactor(pvalueNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new26() /* reduce ANumberValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumberValue(tnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new27() /* reduce AStringValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalueNode1 = new AStringValue(tstringNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new28() /* reduce ABooleanValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PBoolean pbooleanNode2;
        pbooleanNode2 = (PBoolean)nodeArrayList1.get(0);

        pvalueNode1 = new ABooleanValue(pbooleanNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new29() /* reduce AAfunctioncallvalue1Value */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        @SuppressWarnings("unused") Object nullNode4 = null;
        TRightParen trightparenNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList3.get(0);

        pvalueNode1 = new AFunctioncallValue(tidentifierNode2, tleftparenNode3, null, trightparenNode5);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new30() /* reduce AAfunctioncallvalue2Value */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftParen tleftparenNode3;
        PArguments pargumentsNode4;
        TRightParen trightparenNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftparenNode3 = (TLeftParen)nodeArrayList2.get(0);
        pargumentsNode4 = (PArguments)nodeArrayList3.get(0);
        trightparenNode5 = (TRightParen)nodeArrayList4.get(0);

        pvalueNode1 = new AFunctioncallValue(tidentifierNode2, tleftparenNode3, pargumentsNode4, trightparenNode5);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new31() /* reduce AVariableValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PVariable pvariableNode2;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);

        pvalueNode1 = new AVariableValue(pvariableNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new32() /* reduce AGeneratorValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TVar tvarNode2;
        TIdentifier tidentifierNode3;
        TVar tvarNode4;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tvarNode4 = (TVar)nodeArrayList3.get(0);

        pvalueNode1 = new AGeneratorValue(tvarNode2, tidentifierNode3, tvarNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new33() /* reduce AParensValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TLeftParen tleftparenNode2;
        PExpr pexprNode3;
        TRightParen trightparenNode4;
        tleftparenNode2 = (TLeftParen)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trightparenNode4 = (TRightParen)nodeArrayList3.get(0);

        pvalueNode1 = new AParensValue(tleftparenNode2, pexprNode3, trightparenNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new34() /* reduce AAnativefunctioncallvalue1Value */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TPercent tpercentNode2;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        @SuppressWarnings("unused") Object nullNode5 = null;
        TRightParen trightparenNode6;
        tpercentNode2 = (TPercent)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList3.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList4.get(0);

        pvalueNode1 = new ANativefunctioncallValue(tpercentNode2, tidentifierNode3, tleftparenNode4, null, trightparenNode6);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new35() /* reduce AAnativefunctioncallvalue2Value */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TPercent tpercentNode2;
        TIdentifier tidentifierNode3;
        TLeftParen tleftparenNode4;
        PArguments pargumentsNode5;
        TRightParen trightparenNode6;
        tpercentNode2 = (TPercent)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tleftparenNode4 = (TLeftParen)nodeArrayList3.get(0);
        pargumentsNode5 = (PArguments)nodeArrayList4.get(0);
        trightparenNode6 = (TRightParen)nodeArrayList5.get(0);

        pvalueNode1 = new ANativefunctioncallValue(tpercentNode2, tidentifierNode3, tleftparenNode4, pargumentsNode5, trightparenNode6);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new36() /* reduce AArrayValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PArray parrayNode2;
        parrayNode2 = (PArray)nodeArrayList1.get(0);

        pvalueNode1 = new AArrayValue(parrayNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new37() /* reduce AArrayAccessValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PVariableorliteralarray pvariableorliteralarrayNode2;
        TLeftBlock tleftblockNode3;
        PExpr pexprNode4;
        TRightBlock trightblockNode5;
        pvariableorliteralarrayNode2 = (PVariableorliteralarray)nodeArrayList1.get(0);
        tleftblockNode3 = (TLeftBlock)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trightblockNode5 = (TRightBlock)nodeArrayList4.get(0);

        pvalueNode1 = new AArrayAccessValue(pvariableorliteralarrayNode2, tleftblockNode3, pexprNode4, trightblockNode5);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new38() /* reduce AWidgetPathValue */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList listNode4 = new LinkedList();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList listNode3 = new LinkedList();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pvalueNode1 = new AWidgetPathValue(tidentifierNode2, listNode4);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new39() /* reduce AVariableVariableorliteralarray */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariableorliteralarray pvariableorliteralarrayNode1;
        {
            // Block
        PVariable pvariableNode2;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);

        pvariableorliteralarrayNode1 = new AVariableVariableorliteralarray(pvariableNode2);
        }
	nodeList.add(pvariableorliteralarrayNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new40() /* reduce AArrayVariableorliteralarray */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariableorliteralarray pvariableorliteralarrayNode1;
        {
            // Block
        PArray parrayNode2;
        parrayNode2 = (PArray)nodeArrayList1.get(0);

        pvariableorliteralarrayNode1 = new AArrayVariableorliteralarray(parrayNode2);
        }
	nodeList.add(pvariableorliteralarrayNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new41() /* reduce AArray */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PArray parrayNode1;
        {
            // Block
        TLeftBlock tleftblockNode2;
        PArguments pargumentsNode3;
        TRightBlock trightblockNode4;
        tleftblockNode2 = (TLeftBlock)nodeArrayList1.get(0);
        pargumentsNode3 = (PArguments)nodeArrayList2.get(0);
        trightblockNode4 = (TRightBlock)nodeArrayList3.get(0);

        parrayNode1 = new AArray(tleftblockNode2, pargumentsNode3, trightblockNode4);
        }
	nodeList.add(parrayNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new42() /* reduce AVariable */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TVar tvarNode2;
        TLeftBrace tleftbraceNode3;
        TIdentifier tidentifierNode4;
        TRightBrace trightbraceNode5;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        tleftbraceNode3 = (TLeftBrace)nodeArrayList2.get(0);
        tidentifierNode4 = (TIdentifier)nodeArrayList3.get(0);
        trightbraceNode5 = (TRightBrace)nodeArrayList4.get(0);

        pvariableNode1 = new AVariable(tvarNode2, tleftbraceNode3, tidentifierNode4, trightbraceNode5);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new43() /* reduce AWidgetOrWidgetAccessListWithProperty */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWidgetOrWidgetAccessListWithProperty pwidgetorwidgetaccesslistwithpropertyNode1;
        {
            // Block
        TPoint tpointNode2;
        PWidgetOrWidgetAccess pwidgetorwidgetaccessNode3;
        tpointNode2 = (TPoint)nodeArrayList1.get(0);
        pwidgetorwidgetaccessNode3 = (PWidgetOrWidgetAccess)nodeArrayList2.get(0);

        pwidgetorwidgetaccesslistwithpropertyNode1 = new AWidgetOrWidgetAccessListWithProperty(tpointNode2, pwidgetorwidgetaccessNode3);
        }
	nodeList.add(pwidgetorwidgetaccesslistwithpropertyNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new44() /* reduce ASimplewidgetWidgetOrWidgetAccess */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWidgetOrWidgetAccess pwidgetorwidgetaccessNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pwidgetorwidgetaccessNode1 = new ASimplewidgetWidgetOrWidgetAccess(tidentifierNode2);
        }
	nodeList.add(pwidgetorwidgetaccessNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new45() /* reduce AWidgetarrayaccessWidgetOrWidgetAccess */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PWidgetOrWidgetAccess pwidgetorwidgetaccessNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLeftBlock tleftblockNode3;
        PExpr pexprNode4;
        TRightBlock trightblockNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tleftblockNode3 = (TLeftBlock)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        trightblockNode5 = (TRightBlock)nodeArrayList4.get(0);

        pwidgetorwidgetaccessNode1 = new AWidgetarrayaccessWidgetOrWidgetAccess(tidentifierNode2, tleftblockNode3, pexprNode4, trightblockNode5);
        }
	nodeList.add(pwidgetorwidgetaccessNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new46() /* reduce ATrueBoolean */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pbooleanNode1 = new ATrueBoolean(ttrueNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new47() /* reduce AFalseBoolean */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PBoolean pbooleanNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pbooleanNode1 = new AFalseBoolean(tfalseNode2);
        }
	nodeList.add(pbooleanNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new48() /* reduce AStringTypeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TStringType tstringtypeNode2;
        tstringtypeNode2 = (TStringType)nodeArrayList1.get(0);

        ptypeNode1 = new AStringTypeType(tstringtypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new49() /* reduce ANumberTypeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TNumberType tnumbertypeNode2;
        tnumbertypeNode2 = (TNumberType)nodeArrayList1.get(0);

        ptypeNode1 = new ANumberTypeType(tnumbertypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new50() /* reduce ABooleanTypeType */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBooleanType tbooleantypeNode2;
        tbooleantypeNode2 = (TBooleanType)nodeArrayList1.get(0);

        ptypeNode1 = new ABooleanTypeType(tbooleantypeNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new51() /* reduce ATerminal$WidgetOrWidgetAccessListWithProperty */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode2 = new LinkedList();
        {
            // Block
        PWidgetOrWidgetAccessListWithProperty pwidgetorwidgetaccesslistwithpropertyNode1;
        pwidgetorwidgetaccesslistwithpropertyNode1 = (PWidgetOrWidgetAccessListWithProperty)nodeArrayList1.get(0);
	if(pwidgetorwidgetaccesslistwithpropertyNode1 != null)
	{
	  listNode2.add(pwidgetorwidgetaccesslistwithpropertyNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings("unchecked")
    ArrayList new52() /* reduce ANonTerminal$WidgetOrWidgetAccessListWithProperty */
    {
        @SuppressWarnings("hiding") ArrayList nodeList = new ArrayList();

        @SuppressWarnings("unused") ArrayList nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList nodeArrayList1 = pop();
        LinkedList listNode3 = new LinkedList();
        {
            // Block
        LinkedList listNode1 = new LinkedList();
        PWidgetOrWidgetAccessListWithProperty pwidgetorwidgetaccesslistwithpropertyNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pwidgetorwidgetaccesslistwithpropertyNode2 = (PWidgetOrWidgetAccessListWithProperty)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pwidgetorwidgetaccesslistwithpropertyNode2 != null)
	{
	  listNode3.add(pwidgetorwidgetaccesslistwithpropertyNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 10}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 4}, {8, SHIFT, 26}, {27, SHIFT, 27}, },
			{{-1, ERROR, 5}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 6}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 10}, {21, SHIFT, 31}, {29, SHIFT, 32}, {32, SHIFT, 33}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 12}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 13}, {27, SHIFT, 38}, },
			{{-1, ERROR, 14}, {36, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {30, SHIFT, 39}, },
			{{-1, REDUCE, 4}, {16, SHIFT, 40}, {17, SHIFT, 41}, {18, SHIFT, 42}, },
			{{-1, REDUCE, 11}, {10, SHIFT, 43}, {11, SHIFT, 44}, {12, SHIFT, 45}, {13, SHIFT, 46}, {14, SHIFT, 47}, {15, SHIFT, 48}, },
			{{-1, REDUCE, 18}, {3, SHIFT, 49}, {4, SHIFT, 50}, },
			{{-1, REDUCE, 21}, {5, SHIFT, 51}, {6, SHIFT, 52}, {20, SHIFT, 53}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 21}, {33, SHIFT, 54}, },
			{{-1, REDUCE, 36}, {33, REDUCE, 40}, },
			{{-1, REDUCE, 31}, {33, REDUCE, 39}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 25}, {27, SHIFT, 55}, },
			{{-1, ERROR, 26}, {27, SHIFT, 56}, },
			{{-1, ERROR, 27}, {7, SHIFT, 57}, },
			{{-1, ERROR, 28}, {21, SHIFT, 31}, {29, SHIFT, 32}, },
			{{-1, REDUCE, 10}, {10, SHIFT, 43}, {11, SHIFT, 44}, {12, SHIFT, 45}, {13, SHIFT, 46}, {14, SHIFT, 47}, {15, SHIFT, 48}, },
			{{-1, ERROR, 30}, {16, SHIFT, 40}, {17, SHIFT, 41}, {18, SHIFT, 42}, {22, SHIFT, 58}, },
			{{-1, ERROR, 31}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 59}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 32}, {27, SHIFT, 61}, },
			{{-1, ERROR, 33}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 38}, {29, SHIFT, 32}, },
			{{-1, ERROR, 36}, {34, SHIFT, 65}, },
			{{-1, REDUCE, 5}, {16, SHIFT, 40}, {17, SHIFT, 41}, {18, SHIFT, 42}, {31, SHIFT, 66}, },
			{{-1, ERROR, 38}, {21, SHIFT, 67}, },
			{{-1, ERROR, 39}, {0, SHIFT, 1}, {1, SHIFT, 2}, {2, SHIFT, 3}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 10}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 40}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 41}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 42}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 43}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 44}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 45}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 46}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 47}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 48}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 49}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 50}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 51}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 52}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 53}, {7, SHIFT, 4}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 54}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 55}, {32, SHIFT, 84}, },
			{{-1, ERROR, 56}, {9, SHIFT, 85}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 60}, {22, SHIFT, 86}, },
			{{-1, REDUCE, 44}, {33, SHIFT, 87}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 2}, {16, SHIFT, 40}, {17, SHIFT, 41}, {18, SHIFT, 42}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 66}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, ERROR, 67}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {22, SHIFT, 89}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 7}, {10, SHIFT, 43}, {11, SHIFT, 44}, {12, SHIFT, 45}, {13, SHIFT, 46}, {14, SHIFT, 47}, {15, SHIFT, 48}, },
			{{-1, REDUCE, 9}, {10, SHIFT, 43}, {11, SHIFT, 44}, {12, SHIFT, 45}, {13, SHIFT, 46}, {14, SHIFT, 47}, {15, SHIFT, 48}, },
			{{-1, REDUCE, 8}, {10, SHIFT, 43}, {11, SHIFT, 44}, {12, SHIFT, 45}, {13, SHIFT, 46}, {14, SHIFT, 47}, {15, SHIFT, 48}, },
			{{-1, REDUCE, 12}, {3, SHIFT, 49}, {4, SHIFT, 50}, },
			{{-1, REDUCE, 13}, {3, SHIFT, 49}, {4, SHIFT, 50}, },
			{{-1, REDUCE, 14}, {3, SHIFT, 49}, {4, SHIFT, 50}, },
			{{-1, REDUCE, 15}, {3, SHIFT, 49}, {4, SHIFT, 50}, },
			{{-1, REDUCE, 16}, {3, SHIFT, 49}, {4, SHIFT, 50}, },
			{{-1, REDUCE, 17}, {3, SHIFT, 49}, {4, SHIFT, 50}, },
			{{-1, REDUCE, 19}, {5, SHIFT, 51}, {6, SHIFT, 52}, {20, SHIFT, 53}, },
			{{-1, REDUCE, 20}, {5, SHIFT, 51}, {6, SHIFT, 52}, {20, SHIFT, 53}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 83}, {16, SHIFT, 40}, {17, SHIFT, 41}, {18, SHIFT, 42}, {34, SHIFT, 91}, },
			{{-1, ERROR, 84}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 87}, {7, SHIFT, 4}, {19, SHIFT, 5}, {21, SHIFT, 6}, {23, SHIFT, 7}, {25, SHIFT, 8}, {26, SHIFT, 9}, {27, SHIFT, 28}, {28, SHIFT, 11}, {33, SHIFT, 12}, {35, SHIFT, 13}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 90}, {22, SHIFT, 94}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 3}, {16, SHIFT, 40}, {17, SHIFT, 41}, {18, SHIFT, 42}, },
			{{-1, ERROR, 93}, {16, SHIFT, 40}, {17, SHIFT, 41}, {18, SHIFT, 42}, {34, SHIFT, 95}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 45}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 14}, {39, 68}, },
			{{-1, 15}, },
			{{-1, 36}, {31, 60}, {66, 88}, {67, 90}, },
			{{-1, 37}, {0, 16}, {6, 30}, {33, 63}, {39, 16}, {54, 83}, {84, 92}, {87, 93}, },
			{{-1, 17}, {5, 29}, {40, 69}, {41, 70}, {42, 71}, },
			{{-1, 18}, {43, 72}, {44, 73}, {45, 74}, {46, 75}, {47, 76}, {48, 77}, },
			{{-1, 19}, {49, 78}, {50, 79}, },
			{{-1, 20}, {51, 80}, {52, 81}, {53, 82}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 34}, {35, 64}, },
			{{-1, 62}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 35}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'String', 'Number', 'Boolean', var, '!', '(', number, 'true', 'false', identifier, string, '[', '%'",
			"expecting: identifier",
			"expecting: left brace, identifier",
			"expecting: var, '(', number, 'true', 'false', identifier, string, '[', '%'",
			"expecting: var, '!', '(', number, 'true', 'false', identifier, string, '[', '%'",
			"expecting: '+', '-', '*', '/', '>', '>=', '!=', '=', '<', '<=', '&&', '->', '||', '#', ')', ';', ',', ']', EOF",
			"expecting: '(', '.', ':='",
			"expecting: EOF",
			"expecting: ';', EOF",
			"expecting: '&&', '->', '||', ';', EOF",
			"expecting: '>', '>=', '!=', '=', '<', '<=', '&&', '->', '||', ')', ';', ',', ']', EOF",
			"expecting: '+', '-', '>', '>=', '!=', '=', '<', '<=', '&&', '->', '||', ')', ';', ',', ']', EOF",
			"expecting: '['",
			"expecting: '+', '-', '*', '/', '>', '>=', '!=', '=', '<', '<=', '&&', '->', '||', '#', ')', ';', ',', '[', ']', EOF",
			"expecting: var",
			"expecting: '(', '.'",
			"expecting: '&&', '->', '||', ')'",
			"expecting: var, '!', '(', ')', number, 'true', 'false', identifier, string, '[', '%'",
			"expecting: '+', '-', '*', '/', '>', '>=', '!=', '=', '<', '<=', '&&', '->', '||', '#', ')', '.', ';', ',', ']', EOF",
			"expecting: ']'",
			"expecting: '&&', '->', '||', ')', ',', ']'",
			"expecting: '('",
			"expecting: ':='",
			"expecting: right brace",
			"expecting: ')'",
			"expecting: '+', '-', '*', '/', '>', '>=', '!=', '=', '<', '<=', '&&', '->', '||', '#', ')', '.', ';', ',', '[', ']', EOF",
			"expecting: '&&', '->', '||', ']'",
			"expecting: ')', ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 5, 4, 1, 7, 8, 9, 10, 11, 5, 5, 12, 13, 13, 5, 1, 1, 14, 15, 10, 16, 17, 1, 4, 18, 18, 19, 20, 21, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 22, 23, 5, 5, 5, 24, 25, 18, 9, 18, 13, 4, 17, 7, 10, 10, 10, 11, 11, 11, 11, 11, 11, 5, 5, 5, 5, 5, 26, 4, 13, 5, 4, 27, 5, 24, 5, 9, 26, 5, 18, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
